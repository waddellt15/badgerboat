//====================================================================
module   = alogcat
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = ConCATinate two alog files into one alog file
depends  = lib_mbutil, lib_logutils
borndate = 180813
doc_url  = http://oceanai.mit.edu/ivpman/apps/alogcat
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = Create a new MOOS .alog file from two or more given .alog
  files. Given files are meant to be non-overlapping in time,
  presumably made by starting and stopping a single MOOS community.

//====================================================================
module   = alogcd
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Scan an alog file for collision detection reports.
depends  = lib_mbutil, lib_logutils
borndate = 151223
doc_url  = http://oceanai.mit.edu/ivpman/apps/alogcd
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = Scan an alog file for collision detection reports.  Tally
  the totals and averages, and optionally create a file holding all
  the timestamps of events.  By default, it scans for events defined
  by postings to the following three MOOS variables: (1) COLLISION,
  (2) NEAR_MISS, and (3) ENCOUNTER.


//====================================================================
module   = alogcheck
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Scan an alog file and check if given condition is satisfied

depends  = lib_mbutil, lib_logutils, lib_logic
borndate = 151223
doc_url  = Pending
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogcheck is a command line utility that checks if a
   specified condition has been satisfied in an alog file. It can
   be used as part of an autonomated verification and validation scheme
   to check whether a certain success or failure condition was produced
   by a mission.

   The tool can accept a start and end timestamp, or work with the whole
   file. A pass condition may be specified, or alternatively a failure
   condition may be specified. A results output file may be specified or
   else all output goes to the terminal.


//====================================================================
module   = alogclip
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Trim an alog file given a start and end time stamp

depends  = lib_mbutil, lib_logutils, 
borndate = 080605
doc_url  = http://oceanai.mit.edu/ivpman/apps/alogclip
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogclip is a command line utility that creates a new alog
  file from a given alog file, by removing all entries outside a given
  time window. Often useful in post-mission handling of data, especially
  when an alog file inadvertently contains perhaps hours of data not
  relevant to the mission, e.g., if the logger recorded substantial data
  prior or after in-water deployment. 

//====================================================================
module   = aloggrep
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Trim an alog file by retaining specified MOOS variables
depends  = lib_mbutil, lib_logutils, 
borndate = 080806
doc_url  = http://oceanai.mit.edu/ivpman/apps/aloggrep
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = aloggrep is a command line utility that create a new alog
  file, from a given alog file, by retaining only the given MOOS
  variables or sources, named on the command line. Often useful in
  post-mission analysis if one wants to look at only the data from
  a particular source, such as NAV for GPS data for example.


//====================================================================
module   = alogeplot
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Produce an encounter plot image from encounters from and alog file.
depends  = lib_mbutil, lib_logutils, lib_encounters
borndate = 160116
doc_url  = Pending
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogeplot is a command line utility that creates an image, 
  an "encounter plot", rendering all encounters found in the given alog
  file on a 2D plot with the axes of safety (based on CPA distance) 
  and efficiency (application dependent).


//====================================================================
module   = aloghelm
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Scan an alog file to generate one of several helm reports
depends  = lib_mbutil, lib_logutils, lib_helmivp, lib_behaviors,
           lib_ivpbuild, lib_ivpcore, lib_ivpsolve
borndate = 100310
doc_url  = http://oceanai.mit.edu/ivpman/apps/aloghelm
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = aloghelm is a command line utility that will perform one of
  several user specified helm reports based on helm output logged in
  the given alog file. Reports include:

(1) Life events: A report on IvP Helm life events, i.e. behavior spawnings
and destructions.

(2) Behavior state changes: A report showing which behaviors changed state
when, and to which states.

(3) Helm Mode changes: A report showing when the helm changed modes and
to which modes.


//====================================================================
module   = alogiter
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Scan an alog file to analyze avg application load by iterations 
depends  = lib_mbutil, lib_logutils
borndate = 131222
doc_url  = http://oceanai.mit.edu/ivpman/apps/alogiter
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogiter is a command line utility that will scan a given alog
  file and produce a report on the noted iteration length, and gap between
  iterations, for all applications that have produced the ITER_GAP and
  ITER_LEN output variables. This is a quick way to check if a certain
  application may have peaked in load at some point during the mission,
  perhaps to the point where it was not able to run at its requested
  frequency.

//====================================================================
module   = alogpare
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Prune an alog file based on events and mark values
depends  = lib_mbutil, lib_logutils
borndate = 151225
doc_url  = http://oceanai.mit.edu/ivpman/apps/alogpare
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogpare is a command line utility that will create a new
  alog file from a given alog file. It will pare the original file in
  a two-pass manner. The first pass detects events defined by provided
  mark variables. The second pass will remove lines involving variables
  on a hit-list that are not within a specified window of time of an
  event line.

  This utility may be useful in post-mission data managment by greatly
  thinning large log files by reducing information outside of events
  of interest. For example in collision avoidance testing, the log files
  may be pruned unless an encounter involving a near collision is noted.
  There may be no need for full data outside of near collision windows.
  

//====================================================================
module   = alogrm
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Prune an alog file by removing nammed MOOS variables
depends  = lib_mbutil, lib_logutils
borndate = 080806
doc_url  = http://oceanai.mit.edu/ivpman/apps/alogrm
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogrm is a command line utility that will generate a new
  alog file from a given alog file, by removing certain lines. A line
  may be targeted for removal if its name matches one or more provided
  MOOS variables.  Or it may be removed if its source matches one or
  more provided app names.

  This utility may be useful in post-mission data managment by greatly
  thinning large log files if certain data in those files can be safely
  discarded.


//====================================================================
module   = alogscan
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Scan an alog file and produce breakdowns on log volume
depends  = lib_mbutil, lib_logutils
borndate = 080605
doc_url  = http://oceanai.mit.edu/ivpman/apps/alogscan
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogscan is a command line utility that will create summary
  report from a given alog file. This report will contain a line for all
  logged MOOS variables, noting which app(s) published to it, the first
  and last publish time, and the total number of lines and characters in
  the alog file used by this variable.

//====================================================================
module   = alogsort
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Create new alog file sorting entries based on timestamp
depends  = lib_mbutil, lib_logutils
borndate = 130622
doc_url  = Pending
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogsort is a command line utility that will create a new alog
  file from a given alog file, by ensuring absolute ordering of all lines
  based on their timestamps. In general pLogger/alog lines are ordered, but
  occasionally they are not. Most alog utilities do not rely on the assumption
  of absolute ordering. But if a utility does indeed depend on this absolute
  ordering, this tool can be used to create an equivalent alog file with
  guaranteed absolute ordering of lines.

//====================================================================
module   = alogsplit
type     = Command line utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = Split an alog file into dedicated alog files per variable
depends  = lib_mbutil, lib_logutils
borndate = 150215
doc_url  = http://oceanai.mit.edu/ivpman/apps/alogsplit
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogsplit is a command line utility that will take a given
  alog file and split the contents into a directory, within which each
  MOOS variable is split into its own (klog) file containing only that
  variable. The split will also create a summary.klog file with
  summary information. The original alog file is unchanged. It will
  not overwrite the directory if previously created.
                                                           
  This is essentially the operation done at the outset of launching
  the alogview applicaton. The split allows for faster access for
  information indexed on a given variable name. This utility can be
  run prior to launching alogview, which will shorten the launch time
  of alogview. Otherwise alogview will perform this step autonomically
  the first time it is launched with the given alog file.

//====================================================================
module   = alogview
type     = GUI utility
author   = Michael Benjamin
contact  = mikerb@mit.edu
org      = MIT
thumb    = A GUI tool for replaying and analyzing one or more vehicle alog files
depends  = lib_mbutil, lib_logutils, lib_marineview, lib_helmivp, 
           lib_geometry, lib_contacts, lib_ipfview, lib_encounters, 
           lib_ivpbuild, lib_apputil
borndate = 150215
doc_url  = http://oceanai.mit.edu/ivpman/apps/alogview
license  = GPL
group    = ALog Toolbox
distro   = moos-ivp.org

synopsis = alogview is a GUI based tool for rendering vehicle paths
  from multiple MOOS .alog files. The user may simply replay logged
  data, or step through manually, or index anywhere on the timeline
  with a single mouse click. Supports several specialized pop-up
  windows for viewing helm state, objective functions, any logged
  variable across vehicles. If multiple alog files are given, they
  will be synchronized. Upon launch, the original alog files are split
  into dedicated directories to cache data base on the MOOS variable
  name.
  
  
